;============================================================================
;   导入和导出
;----------------------------------------------------------------------------
; 导入函数
extern chronix_main                 ; 内核主函数

; 导出函数
global _start                       ; 导出_start程序开始符号，链接器需要它

;============================================================================
;   内核数据段
;----------------------------------------------------------------------------
[section .data]
bits 32
    nop

BOOT_PARAMS equ 0x500
MEM_SIZE_PARAM equ BOOT_PARAMS
;============================================================================
;   内核堆栈段
;----------------------------------------------------------------------------
[section .bss]
StackSpace:     resb 4 * 1024       ; 4KB栈空间
StackTop:
;============================================================================
;   内核代码段
;----------------------------------------------------------------------------
[section .text]
_start:     ; 内核程序入口
    ; 注意! 在使用 C 代码的时候一定要保证 ds, es, ss 这几个段寄存器的值是一样的
    ; 因为编译器有可能编译出使用它们的代码, 而编译器默认它们是一样的. 比如串拷贝操作会用到 ds 和 es。
    ; 寄存器复位
    mov ax, ds
    mov es, ax
    mov fs, ax
    mov ss, ax              ; es = fs = ss = 内核数据段
    mov esp, StackTop       ; 栈顶
    
    push dword [MEM_SIZE_PARAM]
    ; 跳入C语言编写的主函数
    call chronix_main
    
stop32:
    hlt
    jmp stop32